#!/usr/bin/env node

var _ = require('underscore'),
    _s = require('underscore.string'),
    fs = require('fs'),
    cp = require('child_process'),
    handlebars = require('handlebars'),
    util = require('util'),
    regex = require('../lib/regex.js'),
    pathModule = require('path'),
    inflect = require('../lib/support/inflect.js'),
    Protos = require('../lib/protos.js'),
    Multi = require('multi'),
    Utility = require('../lib/utility.js'),
    CommandLine = require('../lib/command.js');

var origPath;
var protosPath = pathModule.resolve(__dirname, '../');

var commands = {
  
  validate: {
    args: 1,
    run: function(data) {
      
      var sanitizer = require('sanitizer');
      var colorize = Utility.prototype.colorize;
      var request = require('request');
      
      var url = data.args[0];
      
      request(url, function(err, res, html) {
        
        if (err) {
          throw err;
        } else {
          
          request({
            method: 'POST',
            uri: 'http://html5.validator.nu',
            headers: {
              'content-type': 'multipart/form-data' 
            },
            multipart: [{
              'Content-Disposition': 'form-data; name="content"',
              body: html
            }]
          }, function(err, res, buf) {
            
            var errors = /<li class="error">(.*?)<\/li>/g;
            var matches = buf.match(errors);
      
            if (matches) {
        
              console.log(util.format('\nFound %d Errors:', matches.length));
        
              matches.forEach(function(match, i) {
          
                match = match.replace(/(<p class="location">)/, '\n$1');
                match = match.replace(/<\/?.*?>/g, '');
                match = sanitizer.unescapeEntities(match);
                match = match.split('\n');
          
                var err = match[0];
                var code = match[1].split('â†©').pop().replace(/(From|At) line \d+, column \d+; to line \d+, column \d+/, '').trim();
                
                code = code;
          
                err = colorize(err, '1');
                code = colorize(code, '0;31');
          
                console.log(util.format('\n%d. %s\n%s', (i+1), err, code));
          
              });
        
              console.log();
      
            } else {
        
              console.exit('\nDocument validates successfully as HTML5 + ARIA + SVG 1.1 + MathML 2.0\n');
        
            }
            
          });
        }
      });
    }
  },
  
  link: {
    args: 0,
    validate: validateApp,
    run: function(data) {
      linkProtosDep();
    }
  },
  
  create: {
    multiple: ['js', 'css', 'model', 'controller'],
    switches: ['skeleton', 'minimal', 'nolink'],
    args: 1,
    help: {
      skeleton: "Use the full application skeleton",
      minimal: "Use a minimal directory structure",
      nolink: "Prevents automatic linking of the protos module",
      model: "Include models on application",
      controller: "Include controllers on application",
    },
    run: function(args) {
      var errored = false;
      if (errored) process.exit();
      createApplication.call(this, args);
    }
  },
  
  install: {
    args: 99,
    validate: validateApp,
    switches: ['global'],
    help: {
      global: "Install packages on protos path"
    },
    run: function(data) {
      
      // Build list of dependencies from dependencies.json
      
      var depsJson = Protos.prototype.require('dependencies.json');
      var middleware = depsJson.middleware;
      var engines = depsJson.engines;

      delete depsJson.middleware;
      delete depsJson.engines;

      var dependencies = {};
      
      for (var dep in depsJson) {
        dependencies[dep] = depsJson[dep];
      }
      
      for (dep in middleware) {
       dependencies[dep] = middleware[dep];
      }
      
      for (dep in engines) {
       (dependencies[dep] = {})[dep] = engines[dep];
      }
      
      // Process required dependencies
      
      var packages = [];
      
      data.args.forEach(function(arg) {
        if (arg in dependencies) {
          var deps = dependencies[arg];
          for (var module in deps) {
            packages.push(util.format('%s@%s', module, deps[module]));
          }
        } else {
          console.exit(util.format("No modules to install for '%s'", arg));
        }
      });
      
      if (data.global) {
        
        // If global, install on protos dir
        
        process.chdir(Protos.path);
        
        npmExec(['install'].concat(packages));
        
      } else {
        
        // Install
        
        npmExec(['install', '--save'].concat(packages));
        
      }
      
    }
  },
  
  start: {
    switches: ['watch'],
    single: ['pidfile', 'port', 'env'],
    args: 99,
    noargs: true,
    sharedHelp: {
      server: ['watch', 'pidfile', 'port', 'env']
    },
    run: function(data) {
      data.fork = true;
      data.logpath = 'stdout.log';
      data.env = data.env || 'production';
      commands.server.run.call(this, data);
    }
  },
  
  stop: {
    switches: [],
    single: ['pidfile'],
    args: 99,
    noargs: true,
    sharedHelp: {
      server: ['pidfile']
    },
    run: function(data) {
      
      var len = data.args.length;
      
      if (len > 1) {
        this.printHelp();
        process.exit();
      } else if (len == 1) {
        var p = data.args.pop();
        if (fs.existsSync(p)) {
          process.chdir(p);
        } else {
          console.exit("Directory not found: " + p);
        }
      }
      
      validateApp.call(this, data, false);
      
      var pidfile = data.pidfile || 'pid';
      
      if (fs.existsSync(pidfile)) {
        // Sends an INT signal so 'exit' events are fired by process
        // This will ensure the application has a clean exit
        var pids = fs.readFileSync(pidfile, 'utf8').split(/\n+/).join(' ');
        var cmd = util.format('kill -2 %s', pids);
        cp.exec(cmd, function(err, stdout, stderr) {
          if (err) {
            console.log(err);
          } else if (stderr || stdout) {
            console.log(stderr || stdout);
          }
        });
      } else {
        console.exit(util.format("Application could not be stopped (no '%s' pidfile found)", pidfile));
      }
      
    }
  },
  
  status: {
    single: ['pidfile'],
    args: 99,
    noargs: true,
    sharedHelp: {
      server: ['pidfile']
    },
    run: function(data) {
      
      var len = data.args.length;
      
      if (len > 1) {
        this.printHelp();
        process.exit();
      } else if (len == 1) {
        var p = data.args.pop();
        if (fs.existsSync(p)) {
          process.chdir(p);
        } else {
          console.exit("Directory not found: " + p);
        }
      }
      
      validateApp.call(this, data, false);
      
      var pidfile = data.pidfile || 'pid';
      
      if (fs.existsSync(pidfile)) {
        console.exit(util.format("Application seems to be running (found pidfile: '%s')", pidfile));
      } else {
        console.exit(util.format("Application doesn't seem to be be running (no '%s' pidfile found)", pidfile));
      }
      
    }
  },
  
  server: {
    switches: ['fork', 'watch'],
    single: ['pidfile', 'logpath', 'port', 'env'],
    args: 99,
    noargs: true,
    help: {
      fork: "Creates a new node process when starting servers",
      port: "Port to use for the HTTP Server",
      env: "Environment to use when running server",
      logpath: "File to save output when forking a new process",
      pidfile: "The pidfile created by the application",
      watch: "When forking, watch contents of stdout file"
    },
    run: function(data) {

      if (data.env) process.env.NODE_ENV = data.env;
      
      var len = data.args.length;
      
      if (len > 1) {
        this.printHelp();
        process.exit();
      } else if (len == 1) {
        var p = data.args.pop();
        if (fs.existsSync(p)) {
          process.chdir(p);
        } else {
          console.exit("Directory not found: " + p);
        }
      }
      
      validateApp.call(this, data, false);
      
      var pidfile = data.pidfile || 'pid';
      
      if (fs.existsSync(pidfile)) {
        console.exit(util.format("Application seems to be running (found pidfile: '%s')", pidfile));
      } else {
        startServer.call(this, process.cwd(), data);
      }

    }
  },
  
  inspector: {
    args: 1,
    run: function(data) {
      var action = data.args.pop();
      switch (action) {
        case 'start':
        case 'stop':
          var cmd = 'node ' + Protos.path + '/tools/' + action + '-inspector';
          cp.exec(cmd, function(err, stdout, stderr) {
            if (err) throw err;
            else console.exit(stdout.trim());
          });
          break;
        default:
          console.exit("Valid commands are: [start, stop]");
          break;
      }
    }
  },
  
  lint: {
    args: Infinity,
    noargs: true,
    single: ['config'],
    run: function(data) {
      
      var args = data.args.map(function(item) {
        return pathModule.resolve(item);
      });
      
      var cwd = process.cwd();
      
      var lintCallback = function(isApp) {
        if (args.length === 0) args.push(process.cwd());
        var conf = (data.config && pathModule.resolve(data.config));
        if (!conf) conf = (fs.existsSync('jshint.json')) ? pathModule.resolve('jshint.json') : Protos.path + '/jshint.json';
        var cmd = util.format('JSHINT_CONFIG="%s" node %s/tools/lint %s', conf, Protos.path, args.join(' '));
        // console.exit(cmd);
        cp.exec(cmd, function(err, stdout, stderr) {
          if (err) console.exit(err);
          else console.log(stdout);
        });
      }
      
      if (validateApp.call(this, data, true)) {
        lintCallback();
      } else {
        process.chdir(cwd);
        lintCallback();
        
      }
      
    }
  },
  
  controller: {
    args: 99,
    validate: validateApp,
    run: function(data) {
      
       var app = pathModule.basename(process.cwd());
       process.chdir('../');
       
       // Create controllers
       data.args.forEach(function(controller) {
         createController.call(this, app, controller);
       }, this);

       // Create views
       viewsBatch.forEach(function(args) {
         createView.apply(data, args);
       });

    }
  },
  
  handler: {
    args: 99,
    validate: validateApp,
    run: function(data) {
      var template = "\n\
/* [handler] {{comment}} */\n\
\n\
module.exports = function() {\n\
\n\
  var app = protos.app;\n\
\n\
  return function(req, res) {\n\
\n\
  }\n\
\n\
}";

      // Remove  readme file
      var readme = 'app/handlers/readme.md';
      if (fs.existsSync(readme)) fs.unlinkSync(readme);
      
      var cwd = process.cwd() + '/app/handlers/';
      
      // Create directory if doesn't exist
      if (!fs.existsSync(cwd)) fs.mkdirSync(cwd);
      
      recursivelyCreateFiles('handlers', data, 'js', function(files) {
        files.forEach(function(file) {
          var comment = file.replace(cwd, '');
          fs.writeFileSync(file, template.replace('{{comment}}', comment), 'utf8');
        });
      });
    }
  },
  
  layout: {
    single: ['ext'],
    args: 99,
    validate: validateApp,
    run: function(data) {
      
      // Use extension from config.cli.partialExt
      var config = require(process.cwd() + '/config.js');
      var ext = data.ext ? data.ext : (config.cli && config.cli.partialExt)
      
      recursivelyCreateFiles('views/__layout', data, ext);

    }
  },
  
  static: {
    single: ['ext'],
    args: 99,
    validate: validateApp,
    run: function(data) {
      // Remove readme file
      var readme = 'app/views/__static/readme.md';
      if (fs.existsSync(readme)) fs.unlinkSync(readme);
      recursivelyCreateFiles('views/__static', data);
    }
  },
  
  restricted: {
    single: ['ext'],
    args: 99,
    validate: validateApp,
    run: function(data) {
      recursivelyCreateFiles('views/__restricted', data);
    }
  },
  
  hook: {
    args: 99,
    validate: validateApp,
    run: function(data) {
      
      var template = handlebars.compile("\
\n\
/* {{{relPath}}} */\n\
\n\
var app = protos.app;\n\
\n\
module.exports = function {{{fileWithoutExtension}}}() {\n\
\n\
}");
      
      createJsFilesWithTemplate('hook/', data, template);

    }
  },
  
  api: {
    args: 99,
    validate: validateApp,
    run: function(data) {
    
      var template = handlebars.compile("\
\n\
/* {{{relPath}}} */\n\
\n\
var app = protos.app;\n\
\n\
module.exports = {\n\
\n\
  {{{lowerCamelCase}}}: function() {\n\
\n\
  }\n\
\n\
}");

      createJsFilesWithTemplate('api/', data, template);
      
    }
  },
  
  config: {
    args: 99,
    validate: validateApp,
    run: function(data) {
  
      var template = handlebars.compile("\
\n\
/* {{{relPath}}} */\n\
\n\
module.exports = {\n\
\n\
}");

      createJsFilesWithTemplate('config/', data, template);
    
    }
  },
  
  ext: {
    args: 99,
    validate: validateApp,
    run: function(data) {

      var template = handlebars.compile("\
\n\
/* {{{relPath}}} */\n\
\n\
var app = protos.app;\n\
\n\
// Code goes here\n");

      createJsFilesWithTemplate('ext/', data, template);
      
    }
  },
  
  include: {
    args: 99,
    validate: validateApp,
    run: function(data) {
      
      var template = handlebars.compile("\
\n\
/* {{{relPath}}} */\n\
\n\
module.exports = {\n\
\n\
}");

      createJsFilesWithTemplate('include/', data, template);
      
    }
  },
  
  view: {
    single: ['ext'],
    args: 99,
    help: {
      ext: 'Extension to use for generated views'
    },
    validate: validateApp,
    run: function(data, partial, path) {
      
      var app = pathModule.basename(process.cwd());
      
      // validate views first
      data.args = data.args.map(function(view) {
        view = view.split('/');
        if (view.length === 2) {
          var controller = view[0];
          if (controller === 'main' && !fs.existsSync('app/views/main')) {
            if (!fs.existsSync('app/views')) fs.mkdirSync('app/views');
            fs.mkdirSync('app/views/main');
          }
          if (fs.existsSync(util.format("app/views/%s", controller))) {
            view.unshift(app);
            view.push(partial || false);
            return view;
          } else {
            console.log(util.format("Invalid view: %s", view.join('/')));
            console.exit(util.format("Controller does not exist: %s", controller));
          }
        } else {
          console.log(util.format("Invalid view: %s", view.join('')));
          console.exit(util.format("The views should be specified as {controller}/{viewname}{.ext}"));
        }
      });
      
      process.chdir('../');
      
      var views = [];
      
      data.args.forEach(function(arr) {
        var name = arr[2];
        if (name.indexOf(',') > 0) {
          name = name.split(',').forEach(function(v) {
            var newArr = arr.concat([]);
            newArr[2] = v;
            views.push(newArr);
          });
        } else {
          views.push(arr);
        }
      });
      
      views.forEach(function(args) {
        createView.apply(data, args);
      });
      
    }
  },
  
  partial: {
    single: ['ext'],
    args: 99,
    validate: validateApp,
    run: function(data) {
      commands.view.run.call(this, data, true); // Set partial
    }
  },
  
  model: {
    single: ['driver', 'context'],
    switches: ['pluralize'],
    args: 99,
    help: {
      driver: 'Driver to use by the model',
      context: 'Model context to set',
      pluralize: 'Pluralize model names'
    },
    validate: validateApp,
    run: function(data) {
       
       var app = pathModule.basename(process.cwd());

       // Remove readme file
       var readme = 'app/models/readme.md';
       if (fs.existsSync(readme)) fs.unlinkSync(readme);

       // Create directory if doesn't exist
       if (!fs.existsSync('app/models')) fs.mkdirSync('app/models');

       process.chdir('../');
       
       // Create models
       data.args.forEach(function(model) {
         createModel(app, model, data);
       });
       
    },
    
  },
  
  helper: {
    args: 99,
    validate: validateApp,
    run: function(data) {
       
      var app = pathModule.basename(process.cwd());
      
      // Create directory if doesn't exist
      if (!fs.existsSync('app/helpers')) fs.mkdirSync('app/helpers');

      process.chdir('../');
      
      // Create helpers
      data.args.forEach(function(helper) {
        createHelper(app, helper);
      });
       
    }
  }

}

var viewsBatch = [];
var helpersBatch = [];

function createApplication(data) {
  
  var app = data.args[0];
  var path = process.cwd() + '/' + app;
  var masterPath = pathModule.resolve(__dirname, '../');
  
  var cmd = util.format("cp -Rf %s/skeleton %s; rm -Rf %s/log/*.log %s/public/*.css %s/public/*.js", 
    masterPath, app, app, app, app);

  if (!data.skeleton) {
    
    ['api', 'config', 'ext', 'hook', 'include', 'lib', 'log', 'priv', 'script', 'upload', 'test'].forEach(function(dir) {
      cmd += util.format(" %s/%s", app, dir);
    });
    
    ['handlers', 'helpers', 'models'].forEach(function(dir) {
      cmd += util.format(" %s/app/%s", app, dir);
    });
    
    ['__restricted', '__static'].forEach(function(dir) {
      cmd += util.format(" %s/app/views/%s", app, dir);
    });
    
  }

  if (data.minimal) {
    
    ['config', 'env', 'log', 'public'].forEach(function(dir) {
      cmd += util.format(" %s/%s", app, dir);
    });
    
    cmd += util.format(" %s/app/views", app);

  }
  
  // console.exit(cmd);
  
  // Check if path exists
  if (fs.existsSync(path)) {
    console.exit(util.format("Can't create %s: path exists", app));
  }
  
  // Copy skeleton dir
  cp.exec(cmd, function(err, stdout, stderr) {
    
    if (err) {
      
      console.exit(stderr);

    } else {
      
      if (data.minimal) {
        
        // Patch MainController
        var mainControllerPath = util.format("%s/app/controllers/main.js", app);
        var mainController = fs.readFileSync(mainControllerPath, 'utf8');

        fs.writeFileSync(mainControllerPath, mainController.replace("res.render('index');", "res.sendHeaders();\n    res.end(\"Welcome to Protos\");"), 'utf8');

        // Edit Config
        var configPath = util.format("%s/config.js", app);
        var config = fs.readFileSync(configPath, 'utf8');
        
        // Set title
        config = config.replace(/title: "(.+)",/, "title: null,")
        .replace("rawViews: false,", "rawViews: true,")
        .replace('return "text/html;', 'return "text/plain;')
        .replace('pretty: true,', 'pretty: false,');
        
        fs.writeFileSync(configPath, config, 'utf8');
        
      }
      
      // Replace protos directory
      var bootFile = util.format('./%s/boot.js', app),
          boot = fs.readFileSync(bootFile, 'utf-8').toString();
      
      fs.writeFileSync(bootFile, boot);
      
      console.log("Â» Successfully created " + app);

      // Link protos to node_modules
      if (!data.nolink) {
        var currentDir = process.cwd();
        process.chdir(app);
        linkProtosDep();
        process.chdir(currentDir);
      }

      // Create models
      data.model.forEach(function(model) {
        createModel.call(data, app, model);
      });
      
      // Create controllers
      data.controller.forEach(function(controller) {
        createController.call(data, app, controller);
      });
      
      // Create helpers
      data.controller.forEach(function(controller) {
         createHelper.call(data, app, controller);
      });
      
      // Create views
      viewsBatch.forEach(function(args) {
        createView.apply(data, args);
      });
      
    }
    
  });
  
}


function createModel(app, name, opts) {
  
  if (!opts) opts = {};
  
  name = name.toLowerCase().replace(/(-|_)?model$/,'');
  
  if (opts.pluralize) name = inflect.pluralize(name);
  
  var model = inflect.camelize(name) + 'Model';
  
  var tpl = "\n\
function %s(app) {\n\
\n\
  this.driver = \"%s\";\n\
\n\
  this.context = \"%s\";\n\
\n\
  this.validation = {\n\
\n\
  }\n\
\n\
  this.properties = {\n\
\n\
  }\n\
\n\
}\n\
\n\
%s.methods = {\n\
\n\
}\n\
\n\
module.exports = %s;";

  tpl = util.format(tpl, model, (opts.driver || 'default'), (opts.context || getModelContext(model)), model, model);
  
  var file = util.format('%s/app/models/%s.js', app, name);
  
  if (fs.existsSync(file)) {
    console.log(util.format("Â» Skipping %s: file exists", file));
    return;
  }
  
  fs.writeFileSync(file, tpl, 'utf-8');
  
  console.log(util.format("Â» Created %s/app/models/%s.js", app, name));
  
}


function createController(app, name) {
  
  name = name.toLowerCase().replace(/(-|_)?controller$/,'');
  
  var controller = inflect.camelize(name) + 'Controller';

  if (controller === 'MainController') return; // That's a no-no
  
  // console.exit([name, controller]);
  
  var tpl = "\n\
function %s(app) {\n\
\n\
  get('/', function(req, res) {\n\
    res.render('index');\n\
  });\n\
\n\
}\n\
\n\
module.exports = %s;";

  tpl = util.format(tpl, controller, controller);

  // console.exit(tpl);
  
  var file = util.format('%s/app/controllers/%s.js', app, name);

  if (fs.existsSync(file)) {
    console.log("Â» Skipping %s: file exists", file);
    return;
  }

  fs.writeFileSync(file, tpl, 'utf-8');

  console.log(util.format("Â» Created %s", file));
  
  viewsBatch.push([app, name, 'index']);
  
}


function getDirPaths(p) {
  
  p = p.replace(/\/+/g, '/').replace(/(^\/|\/$)/, '');
  
  if (p.indexOf('/') > 0) {
    var head, tail, out;
    head = p.split('/');
    tail = head.pop();
    head = head.join('/');
    return tail.split(',').map(function(x) {
      return head + '/' + x.trim();
    });
  } else {
    return [p];
  }
}

function createView(app, controller, view, partial) {

  var tpl, file;
  var cwd = process.cwd();
  
  var baseConfig = process.cwd() + '/' + app + '/config.js';
  
  var config = fs.existsSync(baseConfig) ? require(baseConfig) : {};
  
  if (!config.cli) config.cli = {};
  
  var viewsDir = util.format('%s/app/views', app);
  var dir = util.format('%s/%s', viewsDir, controller);
  
  if (!fs.existsSync(viewsDir)) fs.mkdirSync(viewsDir);
  if (!fs.existsSync(dir)) fs.mkdirSync(dir);
  
  var hasExt = regex.fileWithExtension.test(view);

  if (hasExt) {
    if (partial) {
      file = util.format('%s/partials/%s', dir, view);
    } else {
      file = util.format('%s/%s', dir, view);
    }
  } else {
    if (partial) {
      file = util.format('%s/partials/%s.', dir, view);
    } else {
      file = util.format('%s/%s-%s.', dir, controller, view);
    }
    file += this.ext || config.cli[partial ? 'partialExt' : 'viewExt'] || 'html';
  }
  
  // Replace static file prefix
  file = file.replace('__static-', '');

  if (typeof this.ext === 'undefined') {
    tpl = util.format("\n<p>%s Controller</p>\n", inflect.camelize(controller));
  } else {
    tpl = '';
  }
  
  if (fs.existsSync(file)) {
    console.log(util.format("Â» Skipping %s: file exists", file));
    return;
  }

  if (partial) {
    var partialsPath = pathModule.dirname(file);
    if (!fs.existsSync(partialsPath)) fs.mkdirSync(partialsPath);
  }
  
  fs.writeFileSync(file, tpl, 'utf-8');

  console.log(util.format("Â» Created %s", file));
  
}

function createHelper(app, name) {

  name = name.toLowerCase().replace(/(-|_)?helper$/,'');
  
  var helper = inflect.camelize(name) + 'Helper';

  // console.exit([name, helper]);

  var tpl = "\n\
function %s(app) {\n\
\n\
}\n\
\n\
module.exports = %s;";

  tpl = util.format(tpl, helper, helper);

  // console.exit(tpl);

  var file = util.format('%s/app/helpers/%s.js', app, name);

  if (fs.existsSync(file)) {
    console.log("Â» Skipping %s: file exists", file);
    return;
  }

  fs.writeFileSync(file, tpl, 'utf-8');

  console.log(util.format("Â» Created %s", file));

}

function listFiles(path, regex) {
  var files, out;
  files = fs.readdirSync(path);
  out = [];
  if (regex != null) {
    for (var file,i=0; i < files.length; i++) {
      file = files[i];
      if ( regex.test(file) ) out.push(file);
    }
    return out;
  } else {
    return files;
  }
}

function validateApp(data, noexit, callback) {
  var inApp = listFiles(process.cwd()).indexOf('boot.js') >= 0;
  if (!inApp) {
    process.chdir('../');
    var cwd = process.cwd();
    if (cwd === '/') {
      if (!noexit) {
        if (this.context === 'server') {
          this.printHelp();
          process.exit();
        } else {
          console.exit(util.format("protos [%s] only works within the application path.", this.context));
        }
      } else {
        return false;
      }
    } else {
      return validateApp.apply(this, arguments);
    }
  } else {
    return true;
  }
}

function startServer(path, data) {
  var bootFile = path + '/boot.js';
  var cmd, logPath = data.logpath;
  if (data.port) process.env.PORT_OVERRIDE = data.port;
  if (data.fork) {
    if (!logPath) console.exit("--fork has to be used with --logpath");
    if (fs.existsSync(logPath)) fs.unlinkSync(logPath);
    cmd = util.format("nohup node %s > %s 2>&1", bootFile, logPath);
    cmd = cp.exec(cmd, {env: process.env});
    if (data.watch) {
      var readline = require('readline');
      var chokidar = require('chokidar');
      var retries = 10;
      var interval = setInterval(function() {
        if (--retries < 0) {
          clearInterval(interval);
        } else if (fs.existsSync(logPath)) {
          clearInterval(interval);
          var buf = '';
          var readCallback = function(err, data) {
            if (data) {
              process.stdout.write(data.slice(buf.length));
              buf = data;
            }
          }
          var watcher = chokidar.watch(logPath, {interval: 100});
          watcher.on('change', function() {
            fs.readFile(logPath, 'utf8', readCallback);
          });
          var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
          });
          var terminate = function() {
            watcher.close();
            process.exit();
          }
          rl.on('SIGINT', function() {
            // Catches SIGINT before it's processed by the process
            // and exits accordingly. This allows using CTLR-C to exit
            // and the application will still run in background
            terminate();
          });
          rl.question('', function(answer) {
            // This allows pressing ENTER to exit the watch state
            terminate();
          });
        }
      }, 1000);
    } else {
      process.exit();
    }
  } else {
    var log = function(data) { console.log(data.toString('utf8').trimRight()); }
    cmd = cp.spawn('node', [bootFile], {env: process.env});
    cmd.stdout.on('data', log);
    cmd.stderr.on('data', log);
  }
}

function createJsFilesWithTemplate(target, data, template) {
  
  // Create target if not exists
  if (!fs.existsSync(target)) fs.mkdirSync(target);

  // Remove readme file
  var targetReadme = util.format("%s/%s/readme.md", process.cwd(), target);
  if (fs.existsSync(targetReadme)) fs.unlinkSync(targetReadme);
  
  var app = pathModule.basename(process.cwd());
  var filenames = data.args.map(function(val) { return val.replace(/\.js$/, '') + '.js' });
  var createFiles = {};
  var existing = [];
  filenames.forEach(function(file) {
    var path = process.cwd() + '/' + target + '/' + file;
    if (fs.existsSync(path)) {
      console.log(util.format('Â» Skipping %s%s: file exists', target, file));
    } else {
      var fileWithoutExtension = file.replace(/\.js$/, '');
      var camelCase = inflect.camelize(fileWithoutExtension.toLowerCase());
      var lowerCamelCase = inflect.camelize(fileWithoutExtension.toLowerCase(), true);
      var locals = {
        file: file,
        fileWithoutExtension: fileWithoutExtension,
        path: path,
        relPath: target + file,
        camelCase: camelCase,
        lowerCamelCase: lowerCamelCase
      }
      for (var v in data) {
        if (typeof data[v] == 'boolean') {
          locals[v + '_switch'] = data[v];
        }
      }
      fs.writeFileSync(path, template(locals), 'utf8');
      console.log(util.format('Â» Created %s/%s%s', app, target, file));
    }
  });
}

function recursivelyCreateFiles(target, data, ext, callback) {
  
  var app = pathModule.basename(process.cwd());

  var files = [];
  var dirs = [];
  var tpl = data.template;
  var cwd = process.cwd();
  var baseConfig = cwd + '/config.js';
  var config = require(baseConfig);
  
  if (!config.cli) config.cli = {};
  
  data.args.forEach(function(path) {
    getDirPaths(path).forEach(function(p) {
      var file = cwd + '/app/' + target + '/' + p;
      if (! /\.[a-z]+$/.test(p)) file += ('.' + (ext || data.ext || config.cli.viewExt || 'html'));
      file = '"' + file + '"';
      var dir = '"' + pathModule.dirname(file.slice(1,-1)) + '"';
      if (files.indexOf(file) === -1) files.push(file);
      if (dirs.indexOf(dir) === -1) dirs.push(dir);
    });
  });
  
  var cmd = '';
  
  if (dirs.length) cmd += 'mkdir -p ' + dirs.join(' ') + ';';
  if (files.length) cmd += ' touch ' + files.join(' ');
  
  var out = [];
  
  files.forEach(function(f) {
    f = f.slice(1,-1);
    if (fs.existsSync(f)) {
      console.log(util.format('Â» Skipping %s%s: file exists', app, f.replace(cwd, '')));
    } else {
      out.push(f);
      console.log(util.format('Â» Created %s%s', app, f.replace(cwd, '')));
    }
  });
  
  cp.exec(cmd, function(err) {
    if (err) {
      console.exit(err);
    } else if (callback instanceof Function) {
      callback(out);
    }
  });
  
}

function linkProtosDep() {
  // NOTE: Works from the application's root path
  var targetpath = 'node_modules/protos';
  if (!fs.existsSync('node_modules')) fs.mkdirSync('node_modules');
  if (!fs.existsSync(targetpath)) fs.symlinkSync(protosPath, targetpath);
}

function getModelContext(string) {
  return _s.dasherize(string)
  .slice(1)
  .replace(/-/g,'_')
  .replace(/_model$/, '');
}

function npmExec(args) {
  
  var npm = cp.spawn('npm', args);
  var stdout = process.stdout;
  
  var logger = function(data) {
    stdout.write(data);
  }
  
  npm.stdout.on('data', logger);
  npm.stderr.on('data', logger);
  
  npm.on('exit', function(code) {
    // Remove 'sys' notices
    var cleanupCmd = util.format('PROTOS_APP_PATH=%s %s/tools/remove-sys-notice', process.cwd(), Protos.path);
    cp.exec(cleanupCmd);
  });
  
}

var cli = new CommandLine(commands);

/*

  Arguments:
  ==========

  create      [name] [options]
  install     [dependency]

  server      [options]

  controller  [name] ...
  handler     [controller]/[name1,name2] ...
  helper      [name] ...
  model       [name] ...

  view        [controller]/[name1,name2] ... [options]
  partial     [controller]/[name1,name2] ... [options]
  layout      [name] ... [options]
  static      [name] ... [options]
  restricted  [name] ... [options]

  api         [name] ...
  hook        [name] ...
  ext         [name] ...
  include     [name] ...

  fetch
  inspector
  lint
  link

*/

cli.help.before = "\n\
Usage: protos [ACTION] [OPTIONS] [ARGUMENTS]\n\n\
Actions: \n\
         create install server start stop status config controller\n\
         handler helper model view partial layout static restricted\n\
         api hook include inspector link lint validate \n\n\
Options:\n";

cli.help.after = "\n\
protos@" + Protos.version + " " + Protos.path + "\n";

cli.parse();
